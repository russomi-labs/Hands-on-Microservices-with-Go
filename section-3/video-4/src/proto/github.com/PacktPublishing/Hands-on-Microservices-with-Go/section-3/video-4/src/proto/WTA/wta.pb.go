// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: wta.proto

package WTA

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName     string                 `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName      string                 `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	IsRightHanded bool                   `protobuf:"varint,4,opt,name=isRightHanded,proto3" json:"isRightHanded,omitempty"`
	BirthDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	CountryCode   string                 `protobuf:"bytes,6,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_wta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_wta_proto_rawDescGZIP(), []int{0}
}

func (x *Player) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Player) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Player) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Player) GetIsRightHanded() bool {
	if x != nil {
		return x.IsRightHanded
	}
	return false
}

func (x *Player) GetBirthDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Player) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type Ranking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId      uint32                 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	RankingDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=rankingDate,proto3" json:"rankingDate,omitempty"`
	Ranking       uint32                 `protobuf:"varint,3,opt,name=ranking,proto3" json:"ranking,omitempty"`
	RankingPoints float32                `protobuf:"fixed32,4,opt,name=rankingPoints,proto3" json:"rankingPoints,omitempty"`
}

func (x *Ranking) Reset() {
	*x = Ranking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ranking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranking) ProtoMessage() {}

func (x *Ranking) ProtoReflect() protoreflect.Message {
	mi := &file_wta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranking.ProtoReflect.Descriptor instead.
func (*Ranking) Descriptor() ([]byte, []int) {
	return file_wta_proto_rawDescGZIP(), []int{1}
}

func (x *Ranking) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Ranking) GetRankingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RankingDate
	}
	return nil
}

func (x *Ranking) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *Ranking) GetRankingPoints() float32 {
	if x != nil {
		return x.RankingPoints
	}
	return 0
}

type PlayerWithRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player  *Player  `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Ranking *Ranking `protobuf:"bytes,2,opt,name=ranking,proto3" json:"ranking,omitempty"`
}

func (x *PlayerWithRanking) Reset() {
	*x = PlayerWithRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerWithRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerWithRanking) ProtoMessage() {}

func (x *PlayerWithRanking) ProtoReflect() protoreflect.Message {
	mi := &file_wta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerWithRanking.ProtoReflect.Descriptor instead.
func (*PlayerWithRanking) Descriptor() ([]byte, []int) {
	return file_wta_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerWithRanking) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PlayerWithRanking) GetRanking() *Ranking {
	if x != nil {
		return x.Ranking
	}
	return nil
}

type PlayerIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId uint32 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
}

func (x *PlayerIdRequest) Reset() {
	*x = PlayerIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerIdRequest) ProtoMessage() {}

func (x *PlayerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerIdRequest.ProtoReflect.Descriptor instead.
func (*PlayerIdRequest) Descriptor() ([]byte, []int) {
	return file_wta_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerIdRequest) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type PlayersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player []*Player `protobuf:"bytes,1,rep,name=player,proto3" json:"player,omitempty"`
}

func (x *PlayersReply) Reset() {
	*x = PlayersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayersReply) ProtoMessage() {}

func (x *PlayersReply) ProtoReflect() protoreflect.Message {
	mi := &file_wta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayersReply.ProtoReflect.Descriptor instead.
func (*PlayersReply) Descriptor() ([]byte, []int) {
	return file_wta_proto_rawDescGZIP(), []int{4}
}

func (x *PlayersReply) GetPlayer() []*Player {
	if x != nil {
		return x.Player
	}
	return nil
}

var File_wta_proto protoreflect.FileDescriptor

var file_wta_proto_rawDesc = []byte{
	0x0a, 0x09, 0x77, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x57, 0x54, 0x41,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x60,
	0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x54, 0x41, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x54, 0x41, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x22, 0x2d, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x23, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x57, 0x54, 0x41, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x32, 0xd0, 0x01, 0x0a, 0x03, 0x57, 0x54, 0x41, 0x12, 0x4d, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x57, 0x54,
	0x41, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x57, 0x54, 0x41, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x2e, 0x57, 0x54, 0x41, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x57, 0x54, 0x41,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x2e, 0x57, 0x54, 0x41,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x57, 0x54, 0x41, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x8f, 0x01, 0x0a, 0x20, 0x70, 0x61, 0x63, 0x6b,
	0x74, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x2e, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x42, 0x0e, 0x46, 0x69,
	0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x59,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x61, 0x63, 0x6b, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x2d, 0x6f, 0x6e, 0x2d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x47, 0x6f, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x33, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2d, 0x34, 0x2f, 0x73, 0x72, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x57, 0x54, 0x41, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_wta_proto_rawDescOnce sync.Once
	file_wta_proto_rawDescData = file_wta_proto_rawDesc
)

func file_wta_proto_rawDescGZIP() []byte {
	file_wta_proto_rawDescOnce.Do(func() {
		file_wta_proto_rawDescData = protoimpl.X.CompressGZIP(file_wta_proto_rawDescData)
	})
	return file_wta_proto_rawDescData
}

var file_wta_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_wta_proto_goTypes = []interface{}{
	(*Player)(nil),                // 0: WTA.Player
	(*Ranking)(nil),               // 1: WTA.Ranking
	(*PlayerWithRanking)(nil),     // 2: WTA.PlayerWithRanking
	(*PlayerIdRequest)(nil),       // 3: WTA.PlayerIdRequest
	(*PlayersReply)(nil),          // 4: WTA.PlayersReply
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_wta_proto_depIdxs = []int32{
	5, // 0: WTA.Player.birthDate:type_name -> google.protobuf.Timestamp
	5, // 1: WTA.Ranking.rankingDate:type_name -> google.protobuf.Timestamp
	0, // 2: WTA.PlayerWithRanking.player:type_name -> WTA.Player
	1, // 3: WTA.PlayerWithRanking.ranking:type_name -> WTA.Ranking
	0, // 4: WTA.PlayersReply.player:type_name -> WTA.Player
	3, // 5: WTA.WTA.GetPlayerWithHighestRanking:input_type -> WTA.PlayerIdRequest
	3, // 6: WTA.WTA.GetRankingsByPlayerId:input_type -> WTA.PlayerIdRequest
	3, // 7: WTA.WTA.GetPlayers:input_type -> WTA.PlayerIdRequest
	2, // 8: WTA.WTA.GetPlayerWithHighestRanking:output_type -> WTA.PlayerWithRanking
	1, // 9: WTA.WTA.GetRankingsByPlayerId:output_type -> WTA.Ranking
	4, // 10: WTA.WTA.GetPlayers:output_type -> WTA.PlayersReply
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_wta_proto_init() }
func file_wta_proto_init() {
	if File_wta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ranking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerWithRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wta_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wta_proto_goTypes,
		DependencyIndexes: file_wta_proto_depIdxs,
		MessageInfos:      file_wta_proto_msgTypes,
	}.Build()
	File_wta_proto = out.File
	file_wta_proto_rawDesc = nil
	file_wta_proto_goTypes = nil
	file_wta_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WTAClient is the client API for WTA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WTAClient interface {
	GetPlayerWithHighestRanking(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (*PlayerWithRanking, error)
	GetRankingsByPlayerId(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (WTA_GetRankingsByPlayerIdClient, error)
	GetPlayers(ctx context.Context, opts ...grpc.CallOption) (WTA_GetPlayersClient, error)
}

type wTAClient struct {
	cc grpc.ClientConnInterface
}

func NewWTAClient(cc grpc.ClientConnInterface) WTAClient {
	return &wTAClient{cc}
}

func (c *wTAClient) GetPlayerWithHighestRanking(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (*PlayerWithRanking, error) {
	out := new(PlayerWithRanking)
	err := c.cc.Invoke(ctx, "/WTA.WTA/GetPlayerWithHighestRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wTAClient) GetRankingsByPlayerId(ctx context.Context, in *PlayerIdRequest, opts ...grpc.CallOption) (WTA_GetRankingsByPlayerIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WTA_serviceDesc.Streams[0], "/WTA.WTA/GetRankingsByPlayerId", opts...)
	if err != nil {
		return nil, err
	}
	x := &wTAGetRankingsByPlayerIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WTA_GetRankingsByPlayerIdClient interface {
	Recv() (*Ranking, error)
	grpc.ClientStream
}

type wTAGetRankingsByPlayerIdClient struct {
	grpc.ClientStream
}

func (x *wTAGetRankingsByPlayerIdClient) Recv() (*Ranking, error) {
	m := new(Ranking)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wTAClient) GetPlayers(ctx context.Context, opts ...grpc.CallOption) (WTA_GetPlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WTA_serviceDesc.Streams[1], "/WTA.WTA/GetPlayers", opts...)
	if err != nil {
		return nil, err
	}
	x := &wTAGetPlayersClient{stream}
	return x, nil
}

type WTA_GetPlayersClient interface {
	Send(*PlayerIdRequest) error
	CloseAndRecv() (*PlayersReply, error)
	grpc.ClientStream
}

type wTAGetPlayersClient struct {
	grpc.ClientStream
}

func (x *wTAGetPlayersClient) Send(m *PlayerIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wTAGetPlayersClient) CloseAndRecv() (*PlayersReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PlayersReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WTAServer is the server API for WTA service.
type WTAServer interface {
	GetPlayerWithHighestRanking(context.Context, *PlayerIdRequest) (*PlayerWithRanking, error)
	GetRankingsByPlayerId(*PlayerIdRequest, WTA_GetRankingsByPlayerIdServer) error
	GetPlayers(WTA_GetPlayersServer) error
}

// UnimplementedWTAServer can be embedded to have forward compatible implementations.
type UnimplementedWTAServer struct {
}

func (*UnimplementedWTAServer) GetPlayerWithHighestRanking(context.Context, *PlayerIdRequest) (*PlayerWithRanking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWithHighestRanking not implemented")
}
func (*UnimplementedWTAServer) GetRankingsByPlayerId(*PlayerIdRequest, WTA_GetRankingsByPlayerIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRankingsByPlayerId not implemented")
}
func (*UnimplementedWTAServer) GetPlayers(WTA_GetPlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlayers not implemented")
}

func RegisterWTAServer(s *grpc.Server, srv WTAServer) {
	s.RegisterService(&_WTA_serviceDesc, srv)
}

func _WTA_GetPlayerWithHighestRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WTAServer).GetPlayerWithHighestRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WTA.WTA/GetPlayerWithHighestRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WTAServer).GetPlayerWithHighestRanking(ctx, req.(*PlayerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WTA_GetRankingsByPlayerId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WTAServer).GetRankingsByPlayerId(m, &wTAGetRankingsByPlayerIdServer{stream})
}

type WTA_GetRankingsByPlayerIdServer interface {
	Send(*Ranking) error
	grpc.ServerStream
}

type wTAGetRankingsByPlayerIdServer struct {
	grpc.ServerStream
}

func (x *wTAGetRankingsByPlayerIdServer) Send(m *Ranking) error {
	return x.ServerStream.SendMsg(m)
}

func _WTA_GetPlayers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WTAServer).GetPlayers(&wTAGetPlayersServer{stream})
}

type WTA_GetPlayersServer interface {
	SendAndClose(*PlayersReply) error
	Recv() (*PlayerIdRequest, error)
	grpc.ServerStream
}

type wTAGetPlayersServer struct {
	grpc.ServerStream
}

func (x *wTAGetPlayersServer) SendAndClose(m *PlayersReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wTAGetPlayersServer) Recv() (*PlayerIdRequest, error) {
	m := new(PlayerIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _WTA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WTA.WTA",
	HandlerType: (*WTAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerWithHighestRanking",
			Handler:    _WTA_GetPlayerWithHighestRanking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRankingsByPlayerId",
			Handler:       _WTA_GetRankingsByPlayerId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPlayers",
			Handler:       _WTA_GetPlayers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "wta.proto",
}
